[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biology 305: Biostatistics",
    "section": "",
    "text": "Preface\nWelcome to Biology 105 at the University of Nebraska at Kearney! Material in this class was designed by Dr. Melissa Wuellner and adapted by Dr. Jacob C. Cooper for use in R.\nIn this class, you will learn:\n\nThe basics of study design, the importance of understanding your research situation before embarking on a full study, and practice creating research frameworks based on different scenarios.\nThe basics of data analysis, including understanding what kind of variables are being collected, why understanding variable types are important, and basic tests to understand univariate distributions.\nBasic multivariate statistics, including ANOVA, correlation, and regression, for comparing multiple different groups.\nThe basics of coding and working in R for performing statistical analyses.\n\nThis site will help you navigate different homework assignments to perform the necessary R tests. Furthermore, this GitHub repository contains all of the homework dataframes, so you will not have to manually enter assignments if you use R to complete your assignments.\nWelcome to class!\nDr. Jacob C. Cooper, BHS 321",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro_to_r.html",
    "href": "intro_to_r.html",
    "title": "1  Intro to R",
    "section": "",
    "text": "2 Setup\nFirst, we need to download R onto your machine. We are also going to download RStudio to assist with creating R scripts and documents.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#installing-r",
    "href": "intro_to_r.html#installing-r",
    "title": "1  Intro to R",
    "section": "2.1 Installing R",
    "text": "2.1 Installing R\nFirst, navigate to the R download and install page. Download the appropriate version for your operating system (Windows, Mac, or Linux). Note that coding will be formatted slightly different for Windows than for other operating systems.\nFollow the installation steps for R, and verify that the installation was successful by searching for R on your machine. You should be presented with a coding window that looks like the following:\nR version 4.4.1 (2024-06-14) -- \"Race for Your Life\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: aarch64-apple-darwin20\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n&gt;\nIf that screen appears, congratulations! R is properly installed. If the install was not successful, please talk to Dr. Cooper and check with your classmates as well.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#installing-rstudio",
    "href": "intro_to_r.html#installing-rstudio",
    "title": "1  Intro to R",
    "section": "2.2 Installing RStudio",
    "text": "2.2 Installing RStudio\nRStudio is a GUI (graphics user interface) that helps make R easier to use. Furthermore, it allows you to create documents in R, including websites (such as this one), PDFs, and even presentations. This can greatly streamline the research pipeline and help you publish your results and associated code in a quick and efficient fashion.\nHead over the the RStudio download website and download “RStudio Desktop”, which is free. Be sure to pick the correct version for your machine.\nOpen RStudio on your machine. You should be presented with something like the following:\n\n\n\nRStudio start window. Note that the screen is split into four different quadrants. Top left: R documents; bottom left: R program; top right: environment window; bottom right: plots, help, and directories.\n\n\nIn RStudio, the top left window is always going to be our coding window. This is where we will type all of our code and create our documents. In the bottom left we will see R executing the code. This will show what the computer is “thinking” and will help us spot any potential issues. The top right window is the “environment”, which shows what variables and datasets are stored within the computers’ memory. (It can also show some other things, but we aren’t concerned with that at this point). The bottom right window is the “display” window. This is where plots and help windows will appear if they don’t appear in the document (top left) window itself.\nNow, we will create our first R document!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#setup-1",
    "href": "intro_to_r.html#setup-1",
    "title": "1  Intro to R",
    "section": "3.1 Setup",
    "text": "3.1 Setup\nIn this class, we will be creating assignments in what is called RMarkdown. This is a rich-text version of R that allows us to create documents with the code embedded. In RStudio, click the “+” button in the far top left to open the New Document menu. Scroll down this list and click on R Markdown.\nA screen such as this will appear:\n\n\n\nA new file window for an RMarkdown file.\n\n\nAfter entering a title and your name and selecting document in the left hand menu, click OK.\n\n\n\nAn example of a markdown script.\n\n\nIn the image above, we can see what a “default” RMarkdown script looks like after creating the file. At the top of the document, between all of the dashes, we have the yaml header that tells R what kind of document will be created, who the author is, and tells it to use today’s date. In this class, we will be saving documents as html as they are the easiest documents to create and save. These documents will include all of your code, text, and even any plots you may create!\nPlain text in the document will be rendered as plain text in the document. (I.e., whatever you type normally will become “normal text” in the finished document). Lines preceded with # will become headers, with ## being a second level header and ### being a third level header, etc. Words can also be made italic by putting an asterisk on each side of the word (*italic*) and bold by putting two asterisks on each side (**bold**). URLs are also supported, with &lt;&gt; on each side of a URL making it clickable, and words being hyperlinked by typing [words to show](target URL).\nWe also have code “chunks” that are shown above. A code chunk can be manually typed out or inserted by pressing CTRL + ALT + I (Windows, Linux) or COMMAND + OPTION + I (Mac). Everything inside a “code chunk” will be read as R code and executed as such. Note that you can have additional commands in the R chunks, but we won’t cover that for now.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#using-code-chunks",
    "href": "intro_to_r.html#using-code-chunks",
    "title": "1  Intro to R",
    "section": "3.2 Using code chunks",
    "text": "3.2 Using code chunks\nIn your computer, erase all information except for the yaml header between the dashes on your computer. Save your file in a folder where you want your assignment to be located. It is important you do this step up front as the computer will sometimes save in random places if you don’t specify a file location at the beginning. Don’t forget to save your work frequently!\n\n\n\nText to type in your Rmarkdown document.\n\n\nAfter typing this into the document, hit knit near the top of the upper left window. R will now create an HTML document that should look like this:\n\n\n\nThe output from the above code knitted into a document.\n\n\nWe can see now that the HTML document has the title of the document, the author’s name, the date on which the code was run, and a greyed-out box with color coded R code followed by the output. Let’s try something a little more complex. Create a new code chunk and type the following:\n\nx &lt;- 1:10\n\nThis will create a variable in R, x, that is sequentially each whole number between 1 and 10. We can see this by highlighting or typing only the letter x and running that line of code by clicking CTRL + ENTER (Windows / Linux) or COMMAND + ENTER (Mac).\n\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nIf you look at the top right window, you will also see the value x in the environment defined as int [1:10] 1 2 3 4 5 6 7 8 9 10. This indicates that x is integer data spanning ten positions numbered 1 to 10. Since the vector is small, it displays every number in the sequence.\n\n\n\nRStudio environment window showing saved objects. These are in the computer’s memory.\n\n\nLet’s create another vector y that is the squared values of x, such that \\(y=x^2\\). We can raise values to an exponent by using ^.\n\ny &lt;- x^2\ny\n\n [1]   1   4   9  16  25  36  49  64  81 100\n\n\nNow we have the value y in the environment that is the square of the values of x. This is a numeric vector of 10 values numbered 1 to 10 where each value corresponds to a square of the x value. We can raise things to any value however, including \\(x^x\\)!\n\nx^x\n\n [1]           1           4          27         256        3125       46656\n [7]      823543    16777216   387420489 10000000000\n\n\nAs we can see, since I didn’t “store” this value as a variable in R using &lt;-, the value is not in the environment.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#plotting",
    "href": "intro_to_r.html#plotting",
    "title": "1  Intro to R",
    "section": "3.3 Plotting",
    "text": "3.3 Plotting\nNow, let’s try creating a plot. This is easy in R, as we just use the command plot.\n\nplot(x = x, y = y)\n\n\n\n\n\n\n\n\nBy specifying the y and x components in plot, we can quickly generate a point plot. We can alter the visual parameters of this plot using a few different commands. I will outline these below with inline notes. Inline notes in the code can be made by using a # symbol before them, which basically tells R to ignore everything after the #. For example:\n\nprint(\"Test\")\n\n[1] \"Test\"\n\n# print(\"Test 2\")\n\nThis prints the word Test, but doesn’t print Test 2.\nNow let’s make the plot with some new visual parameters.\n\nplot(x = x, # specify x values\n     y = y, # specify y values\n     ylab = \"Y Values\", # specify Y label\n     xlab = \"X Values\", # specify X label\n     main = \"Plot Title\", # specify main title\n     pch = 19, # adjust point style\n     col = \"red\") # make points red",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#tab-complete",
    "href": "intro_to_r.html#tab-complete",
    "title": "1  Intro to R",
    "section": "3.4 Tab complete",
    "text": "3.4 Tab complete\nRStudio allows for “tab-completing” while typing code. Tab-completing is a way of typing the first part of a command, variable name, or file name and hitting “tab” to show all options with that spelling. You should use tab completing because it:\n\nreduces spelling mistakes\nreduces filepath mistakes\nincreases the speed at which you code\nprovides help with specific functions",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#help",
    "href": "intro_to_r.html#help",
    "title": "1  Intro to R",
    "section": "3.5 Help",
    "text": "3.5 Help\nAt any point in R, you can look up “help” for a specific function by typing ?functionname. Try this on your computer with the following:\n\n?mean",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#downloading-data",
    "href": "intro_to_r.html#downloading-data",
    "title": "1  Intro to R",
    "section": "4.1 Downloading data",
    "text": "4.1 Downloading data\nNow, we need to download our first data set. These datasets are stored on GitHub. We are going to be looking at data from Dr. Cooper’s dissertation concerning Afrotropical bird distributions (Cooper (2021)). This website is in the data folder on this websites’ GitHub page, accessible here.\n\n# first, declare filepath\n# I will try to give you the filepath for each assignment\n# if not, check the URL pattern for the file\n\n# create\nranges.url &lt;- curl(\"https://raw.githubusercontent.com/jacobccooper/biol105_unk/main/datasets/lacustrine_range_size.csv\")\n# read comma separated file (csv) into R memory\nranges &lt;- read_csv(ranges.url)\n\nRows: 12 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): species\ndbl (9): combined_current_km2, consensus_km2, bioclim_current_km2, 2050_comb...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAlternatively, we can use the operator %&gt;% to simplify this process. %&gt;% means “take whatever you got from the previous step and pipe it into the next step”. So, the following does the exact same thing:\n\nranges &lt;- curl(\"https://raw.githubusercontent.com/jacobccooper/biol105_unk/main/datasets/lacustrine_range_size.csv\") %&gt;%\n  read_csv()\n\nRows: 12 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): species\ndbl (9): combined_current_km2, consensus_km2, bioclim_current_km2, 2050_comb...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nUsing the %&gt;% is preferred as you can better set up a workflow and because it more closely mimics other coding languages, such as bash.\nLet’s view the data to see if it worked. We can use the command head to view the first few rows:\n\nhead(ranges)\n\n# A tibble: 6 × 10\n  species                combined_current_km2 consensus_km2 bioclim_current_km2\n  &lt;chr&gt;                                 &lt;dbl&gt;         &lt;dbl&gt;               &lt;dbl&gt;\n1 Batis_diops                          25209.         6694.              19241.\n2 Chamaetylas_poliophrys               68171.         1106.              68158.\n3 Cinnyris_regius                      60939.        13305.              53627.\n4 Cossypha_archeri                     27021.         6409.              11798.\n5 Cyanomitra_alinae                    78680.        34320.              63381.\n6 Graueria_vittata                      8770.          861.               8301.\n# ℹ 6 more variables: `2050_combined_km2` &lt;dbl&gt;, `2050_consensus_km2` &lt;dbl&gt;,\n#   `2070_combined_km2` &lt;dbl&gt;, `2070_consensus_km2` &lt;dbl&gt;,\n#   alltime_consensus_km2 &lt;dbl&gt;, past_stable_km2 &lt;dbl&gt;\n\n\nWe can perform a lot of summary statistics in R. Some of these we can view for multiple columns at once using summary.\n\nsummary(ranges)\n\n   species          combined_current_km2 consensus_km2     bioclim_current_km2\n Length:12          Min.   :  8770       Min.   :  861.3   Min.   :  3749     \n Class :character   1st Qu.: 24800       1st Qu.: 4186.2   1st Qu.: 10924     \n Mode  :character   Median : 43654       Median : 7778.1   Median : 31455     \n                    Mean   : 68052       Mean   :18161.8   Mean   : 42457     \n                    3rd Qu.: 70798       3rd Qu.:18558.7   3rd Qu.: 62835     \n                    Max.   :232377       Max.   :79306.6   Max.   :148753     \n 2050_combined_km2 2050_consensus_km2 2070_combined_km2  2070_consensus_km2\n Min.   :  1832    Min.   :    0.0    Min.   :   550.3   Min.   :    0.0   \n 1st Qu.:  6562    1st Qu.:  589.5    1st Qu.:  6583.8   1st Qu.:  311.4   \n Median : 26057    Median : 6821.9    Median : 24281.7   Median : 2714.6   \n Mean   : 33247    Mean   :14418.4    Mean   : 31811.0   Mean   : 8250.5   \n 3rd Qu.: 40460    3rd Qu.:18577.1    3rd Qu.: 38468.9   3rd Qu.:10034.4   \n Max.   :132487    Max.   :79236.2    Max.   :129591.0   Max.   :53291.8   \n alltime_consensus_km2 past_stable_km2 \n Min.   :    0.0       Min.   :   0.0  \n 1st Qu.:  790.9       1st Qu.:   0.0  \n Median : 8216.8       Median :   0.0  \n Mean   :15723.3       Mean   : 127.3  \n 3rd Qu.:19675.0       3rd Qu.:   0.0  \n Max.   :82310.5       Max.   :1434.8  \n\n\nAs seen above, we now have information for the following statistics for each variable:\n\nMin = minimum\n1st Qu. = 1st quartile\nMedian = middle of the dataset\nMean = average of the dataset\n3rd Qu. = 3rd quartile\nMax. = maximum\n\nWe can also calculate some of these statistics manually to see if we are doing everything correctly. It is easiest to do this by using predefined functions in R (code others have written to perform a particular task) or to create our own functions in R. We will do both to determine the average of combined_current_km2.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#subsetting-data",
    "href": "intro_to_r.html#subsetting-data",
    "title": "1  Intro to R",
    "section": "4.2 Subsetting data",
    "text": "4.2 Subsetting data\nFirst, we need to select only the column of interest. In R, we have two ways of subsetting data to get a particular column.\n\nvar[rows,cols] is a way to look at a particular object (var in this case) and choose a specific combination of row number and column number (col). This is great if you know a specific index, but it is better to use a specific name.\nvar[rows,\"cols\"] is a way to do the above but by using a specific column name, like combined_current_km2.\nvar$colname is a way to call the specific column name directly from the dataset.\n\n\n# using R functions\n\nranges$combined_current_km2\n\n [1]  25209.4  68171.2  60939.2  27021.3  78679.9   8769.9 232377.2  17401.4\n [9]  51853.5  35455.1  23570.3 187179.1\n\n\nAs shown above, calling the specific column name with $ allows us to see only the data of interest. We can also save these data as an object.\n\ncurrent_combined &lt;- ranges$combined_current_km2\n\ncurrent_combined\n\n [1]  25209.4  68171.2  60939.2  27021.3  78679.9   8769.9 232377.2  17401.4\n [9]  51853.5  35455.1  23570.3 187179.1\n\n\nNow that we have it as an object, specifically a numeric vector, we can perform whatever math operations we need to on the dataset.\n\nmean(current_combined)\n\n[1] 68052.29\n\n\nHere, we can see the mean for the entire dataset. However, we should always round values to the same number of decimal points as the original data. We can do this with round.\n\nround(mean(current_combined),1) # round mean to one decimal\n\n[1] 68052.3\n\n\nNote that the above has a nested set of commands. We can write this exact same thing as follows:\n\n# pipe mean through round\nmean(current_combined) %&gt;%\n  round(1)\n\n[1] 68052.3\n\n\nUse the method that is easiest for you to follow!\nWe can also calculate the mean manually. The mean is \\(\\frac{\\sum_{i=1}^nx}{n}\\), or the sum of all the values within a vector divided by the number of values in that vector.\n\n# create function\n# use curly brackets to denote function\n# our data goes in place of \"x\" when finally run\nour_mean &lt;- function(x){\n  sum_x &lt;- sum(x) # sum all values in vector\n  n &lt;- length(x) # get length of vector\n  xbar &lt;- sum_x/n # calcualte mean\n  return(xbar) # return the value outside the function\n}\n\nLet’s try it.\n\nour_mean(ranges$combined_current_km2)\n\n[1] 68052.29\n\n\nAs we can see, it works just the same as mean! We can round this as well.\n\nour_mean(ranges$combined_current_km2) %&gt;%\n  round(1)\n\n[1] 68052.3",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to *R*</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Cooper, Jacob C. 2021. “Biogeographic and Ecologic\nDrivers of Avian\nDiversity.” Doctoral {Dissertation}, Chicago, IL,\nUSA: The University of Chicago. https://doi.org/10.6082/uchicago.3379.",
    "crumbs": [
      "References"
    ]
  }
]